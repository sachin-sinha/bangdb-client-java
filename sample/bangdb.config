//******* BangDB engine related config *******
//IMPORTANT: most interesting and contextual (local to each app)  
//	params are marked with *** (3 stars) in the beginning of 
//      the comments. Little less interesting are marked with  ** (2 stars)
//      and still less with *(single star). Params that are not marked or  
//	less marked with any star, please be doubly sure before changing them

//***the dir where the db file will be created, Please edit it with 
//	suitable dir location default is the local dir,  
//	note: this can be provided as input param while creating a database

SERVER_DIR = data

//***The log file dir where BangDB will keep the db log file. Ideally the log
//	file dir should be kept on hard disk since log file is always sequential and
//	the data files (SERVER_DIR) should be kept on SSD. But there is no 
//	restriction where actually you decide to keep the log files
//	note: this can be provided as input param while creating a database

BANGDB_LOG_DIR = logdir


//***buf pool size (in MB)
//	note: must chose a good buffer pool size, db is always bounded by this 
//	      and this has direct implications on performance of the db

BUFF_POOL_SIZE_HINT = 4096

//*syslog active. When active(1) then BangDB will do logging using syslog (/var/log/syslog file)
//	when inactive(0) then BangDB will flush the logs on to standard output(terminal)
//	and when set to 2 it will flush to the logfile maintain by the BangDB. The preferred
//	value is 2 as BangDB implements high performance logging mechanism

BANGDB_APP_LOG = 2

//the db and app log size

DB_APP_LOG_SIZE_MB = 4

// Bangdb App log level
// 	Possible values
// 	0: Critical 
// 	1: Error
// 	2: Warning
// 	3: Info
// 	4: Debug

BANGDB_APP_LOG_LEVEL = 3

//******* server configuration (applicable for master - slave model network db) *******
//***type of server master(0) or slave(1) (only for servers and not for the client)
//	note: this can be supplied as command line arg when starting server

SERVER_TYPE = 0

//******* server configuration (applicable for master - slave model network db) *******
//**enable or disable replication
//	note: this can be supplied as command line arg when starting server

ENABLE_REPLICATION = 0

//******* server configuration (applicable for master - slave model network db) *******
//***the ip address or name of the server
//	note: this can be supplied as command line arg when starting server

SERVER_ID = 0.0.0.0

SERVER_PUBLIC_IP = 0.0.0.0

//******* server configuration (applicable for master - slave model network db) *******
//***port number where db service is running
//	note: this can be supplied as command line arg when starting server

SERV_PORT = 10101

//******* server configuration (applicable for master - slave model network db) *******
//***in case of slave set the following two appropriately, note for master 
//	node these two will be same as SERVER_ID and SERV_PORT
//	the ip address or name of the master server
//	note: this can be supplied as command line arg when starting server

MASTER_SERVER_ID = 0.0.0.0

//******* server configuration (applicable for master - slave model network db) *******
//***master's port num
//	note: this can be supplied as command line arg when starting server

MASTER_SERV_PORT = 10101

//******* server configuration (applicable for master - slave model network db) *******
//***max slaves allowed in the master slave topology

MAX_SLAVES = 4

//******* server configuration (applicable for master - slave model network db) *******
//**the ops record buffer size in MB(useful in replication). 
//for 10M ops 500 MB should be good enough

OPS_REC_BUF_SIZE = 256

//******* server configuration (applicable for master - slave model network db) *******
//***the ping frequency (default = 10s)

PING_FREQ = 10

//******* server configuration (applicable for master - slave model network db) *******
//***the threshold for ping failure (num of times, default is 10)

PING_THRESHOLD = 10

//******* server configuration (applicable for master - slave model network db) *******
//***the timeout value for client sockets, 0 means no timeout and 
//positive value means time out in seconds

CLIENT_TIME_OUT = 720

//******* client and server configuration (applicable for master - slave model network db) *******
//Max num of connections in the pool
//keep it short, best number would be order of numOfCores on the machines

NUM_CONNECTIONS_IN_POOL = 32

// SLAB_ALLOC_MEM_SIZE (MB)
// BangDB uses slab allocator, this param allows it to set the buffers accordingly

SLAB_ALLOC_MEM_SIZE = 256

//******* this is for BRS, BangDB Resource Server ************
//	BRS is like S3, where large data could be stored in the buckets
//	BRS access key, max size = 16 bytes/chars, it can be used to
//	authenticate access, use default in most of the cases

BRS_ACCESS_KEY = brs_access_key

//******* this is for BRS, BangDB Resource Server ************
//BRS secret key, max size = 16 bytes/chars

BRS_SECRET_KEY = brs_secret_key

//******* this is for BRS, BangDB Resource Server ************
//BRS database server

BRS_DATABASE_NAME = mydb

//******* this is for BRS, BangDB Resource Server ************
//BRS server IP or name

BRS_SERVER_ID = 0.0.0.0

//******* this is for BRS, BangDB Resource Server ************
//BRS server Port

BRS_SERVER_PORT = 10101

//******* this is for BRS, BangDB Resource Server ************
//BRS bucket name, can override within program as well

BRS_ML_BUCKET_NAME = ml_bucket_info

//******* this is for BRS, BangDB Resource Server ************
//BRS default ttl - it's used for init of mdm. Basically ttil used when default 
//	bucket is created, keep it based on license or based on what you need
//	the value is in sec

BRS_DEFAULT_BUCKET_TTL = 604800

//******** this is for ML training server ************
//training server IP or name [ server doesn't care, more for client ]

ML_TRAINING_SERVER_IP = 0.0.0.0

//******** this is for ML training server ************
//training server Port

ML_TRAINING_SERVER_PORT = 10101

//******** this is for ML training server ************
//prediction server IP or name [ server doesn't care, more for client ]

ML_PRED_SERVER_IP = 0.0.0.0

//******** this is for ML training server ************
//prediction server Port

ML_PRED_SERVER_PORT = 10101

//******** this is for ML training server ************
// this is to set up the ML cluster including the BRS
//pred server type
//default is prediction type
//	0 - invalid [ default will be used ]
//	1 - Training Server [ no prediction will happen, it's a standalone training server ]
//	2 - Prediction Server [ no training will happen, only for prediction ]
//	3 - Hybrid - both train and predict at a single place

BANGDB_ML_SERVER_TYPE = 3

//******** this is for ML training server ************
//training, model file location
//	this is where the training, predictive modules will keep the 
//	files or models locally. This is temp location, therefore feel free
//	to clean the dir when db is shutdown

TRAINING_PREDICT_FILES_LOC = /tmp/BRS_DATA

//******** this is for ML training server ************
//memory budget for training or prediction
//	It depends on kind of server it is. For Training the mem budget
//	will be used for training only, similarly for prediction it will
//	be solely for prediction. However if the server is running in 
//	hybrid mode then it will be for both, 50% each
//	value is in MB

TRAIN_PRED_MEM_BUDGET = 256

//******** this is for ML training server ************
//max number of models that the server could deal with at a time - in concurrent manner

MAX_CONCURRENT_PRED_MODEL = 32

//******** this is to set the buffer table sliding window size in sec **********/
//	CEP for bangdb is file system based and not in-mem only
//	therefore, it maintains a buffer table backed by FS
//	however it is important to keep the size in limit
//	Default is 1 day (86400), however, in some scenario (very less probable)
//	you may wish to increase it

CEP_BUFFER_SW_SIZE = 86400

//*************************************************************************************
//*************************************************************************************
//*************************************************************************************
//**** less likely that there is a need for change, yet you can if you are sure *******
//*************************************************************************************
//*************************************************************************************
//*************************************************************************************

//***the name of the db - default name (applicable only for server and other clients 
//	(including embedded db) should define the name while calling the API)
//	for embedded db case, name is provided as input param while creating/opening
//	a new database (hyphen '-' not allowed in the name)
//	note: this can be provided as input param while creating a database

BANGDB_DATABASE_NAME = mydb

//**type of persistence (0=INMEM_ONLY, 1=INMEM_PERSIST, 2=PERSIST_ONLY)
//	applies to a table, hence within a db, different tables can have different persist
//	types 0 (INMEM_ONLY) means data is only in memory not backed by any file on disk.
//	If process terminates and data dump is not taken then data is lost. 

//	option 1 (INMEM_PERSIST) means, data in memory is backed by file on disk 
//	hence db can handle much more data than allocated memory, which is not possible 
//	with option 0 (INMEM_ONLY)  

//	Option 2 (PERSIST_ONLY) if other extreme where all operations are done with direct 
//	I/O from file on the disk. Hence this is most conservative in nature with very 
//	high data durability but with low performance. Not recommended!

//	note: this can be provided as input param while creating a database

BANGDB_PERSIST_TYPE = 1

//**type of index (1 = EXTHASH, 2 = BTREE)
//	Applicable for a table hence within a db, different tables can have different 
//	index types
//	note: this can be provided as input param while creating a table

BANGDB_INDEX_TYPE = 2

//***write ahead log enabled = 1, disabled = 0
//	This is applicable for a table, hence within a db, different tables 
//	can have different setting

BANGDB_LOG = 1

//**log buffer size (in MB)
//	BangDB writes WAL (write ahead log) for durablity and recovery
//	usually 128MB to 512MB is a good size, however db changes it
//	based on other settings as appropriate

LOG_BUF_SIZE = 128

//**dat buffer or value size in KB (max)
//	This is applicable for db hence applies to all tables

DAT_SIZE = 64

//**key size in bytes (max), min allowed size is 8 bytes
//	Please keep this as low as possible in terms of size for better db performance and efficiency.
//	This applies to a table hence within a db, different tables can have different key sizes. 
//	But once set it can't be changed in future
//	note: it's always good idea to set this for every table separately as different
//	      table will have different setting and need. table_env is the type which
//	      can be used to set this. 8 bytes for long type key and variable for string

KEY_SIZE = 24

//*the default max size of the resutset returned while range scan (in MB)
//	the range scan query can limit the amount of data to be returned using this value
//	note: ideal size is 2 - 8 MB, however it can go upto 16 MB as well

MAX_RESULTSET_SIZE = 4

//**to select the key comparison function. Note that once selected this will never 
//	be allowed to change in future for a table. applicable only for Btree type. Default 
//	value 1 is lexicographical order for keys and value 2 is for quasi lexicographical order
//	for ex; for keys {12, 1, 2}, for value 1 order will be { 1, 12 ,2} and 
//	with 2 it will be { 1, 2, 12} etc...
//	note: this is applied to the table. table_env is the type to use to set it up

KEY_COMP_FUNCTION_ID = 2

//**Important when BangDB is run in transaction mode, If auto commit is off(0) then 
//	explicit transaction is required (begin, commit/abort), else implicit non-transactional 
//	single op can be run in usual manner later this can be set/unset whenever required 
//	using the API exposed by connection

BANGDB_AUTOCOMMIT = 1

//**transaction cache size in terms of number of concurrent transactions. Increasing 
//this would decrease the probability of transaction getting aborted due to forced 
//reclaim of cache nodes. But default works well in most of the situation

BANGDB_TRANSACTION_CACHE_SIZE = 256

//**the default word size. This sets the size for typical word that we would deal with in any text.
//	In normal engish language 35 is good enough, but since we deal with log files as well hence we
//	need to allow user to set the typical max word size that they would like to use. This value
//	should be as small as possible as it affects the size of index and performance

TEXT_WORD_SIZE = 48

//**max number of tables a db can have
//	note: it can go upto several hundred thousands as well, hence change it accordingly

MAXTABLE = 16384

//*max number of connections a client can have, note: all will share the bpool
//This should not be confused with maxnimum number of concurrent clients connections to 
//the server, for that see MAX_CLIENT_EVENTS

MAXCONN = 256

//*mainly for bangdb embedded not relevant for server
//	max threads used by the client (application or client should not have more concurrent 
//	threads than this number) need not be too accurate but it helps in optimizing housekeeping

MAX_THREADS = 256

//*page size in bytes. This is constant for the db and applies to all tables.
//	It can't be changed in future once set for large key_size, please set the
//	page size larger. Basically we should try to have at least 32 keys in a page 
//	but more key we can accomodate in a page, more efficient the computation 
//	will be default size of 8192 or 16384 works pretty well for keys upto 300 bytes length. 
//	Try to design your keys such that it's as small as possible such as below 32 bytes

PAGE_SIZE_BANGDB = 16384

//**master log size (in KB), keep it low, typically 64KB is very high for several billions of records

MASTER_LOG_BUF_SIZE = 4096

// TLS identity and psk key: 32 char hexadecimal
// The admin should tell the TLS_PSK_KEY and you should copy here
TLS_IDENTITY = 250975

TLS_PSK_KEY = 1S2A3C4H5I6N7S8I9N0H1A2M3A4N5N6U

//**the sync for db data while close, 0 means no sync else sync

BANGDB_SYNC_TRAN = 1

//**register signal handler with 1 and de-register with value 0

BANGDB_SIGNAL_HANDLER_STATE = 0


//******* server configuration (applicable for master - slave model network db) *******
//**2nd argument to listen(), the queue size for listen

LISTENQ = 10000

//******* server configuration (applicable for master - slave model network db) *******
//**maximum number of concurrent connections to the server or num of concurrent connections 
//	server can handle default is 10000, but change it to less number as suitable. Please don't 
//	go beyond 10000 as of now not relevant for bangdb embedded

MAX_CLIENT_EVENTS = 10000

//******* server configuration (applicable for master - slave model network db) *******
//*stage options, basically it tells server to create the number of stages 
//	to handle the clients and their requests there are two types of stages supported as of now
//	1. two stages, one for handling clients and other for handling the requests
//	2. four stages, one for handling clients, one for read, one for ops and finally one for write
//	Note: default is option 1 and works well

SERVER_STAGE_OPTION = 1

//******* server configuration (applicable for master - slave model network db) *******
//*how many workers for the ops stage. Note that for option 1, the workers would 
//	be for all the last three events (read, write, ops) suggested value for num of workers for 
//	option 1 is the number of processors on the machine and that's the default but you may change it
//	for option 2, you should make it NPROC-2 (suggested for NPROC>2, else 1, 
//	this is default too for option 2) but you can choose any number
//	value 0 means default else the exact num of workers

SERVER_OPS_WORKERS = 0

//******* server configuration (applicable for master - slave model network db) *******
// Num of worker threads for read stage.

SERVER_READ_WORKERS = 0

//******* server configuration (applicable for master - slave model network db) *******
// Num of worker threads for write stage.

SERVER_WRITE_WORKERS = 0

//****** bangdb allows external python code to run for ML related activities **********
//	when the values is 1 then it means that the external python program
//	can run as part of the current process in separate thread.
//	However, this is not recommended and the external code should run
//	in the child process only. Hence default and recommended value is 0

EXT_PROG_RUN_CHLD_PROCESS = 0


//*************************************************************************************
//*************************************************************************************
//*************************************************************************************
//************ don't change unless sure **************
//*************************************************************************************
//*************************************************************************************
//*************************************************************************************

//**to decide the page split percentage for BTREE. Default is 50%. But in case of sequential writes
//	it is helpful and performant to have the splitting page retain most of the items. To increase
//	the percentage of retained items in the splitting page, increase the value here, for example for 
//	sequential write scenario 90 would be a good value whereas for random operations 50 is better
//	(min is 50 and max is 100)

PAGE_SPILT_FACTOR = 70

//**the frequency for log flush in micro sec
// Try not to change this

LOG_FLUSH_FREQ = 550000

//**to enable(1)/disable(0) check pointing

CHKPNT_ENABLED = 1

//*check point frequency in micro sec
// Try not to change this

CHKPNT_FREQ = 933700

//*log split check frequency in micro sec
// Try not to change this

LOG_SPLIT_CHECK_FREQ = 323000

//*older log files which are not needed for recover could be reclaimed or moved to
//a folder for archive. Set the following 3 params,
//	1. background worker sleep time for the same
//	2. whether to remove or move
//	3. if move then which folder / dir to move to

//value in microsec, ideally more than CHKPNT_FREQ value
// Try not to change this

LOG_RECLAIM_FREQ = 3000000

//	0 means don't do anything,
//	1 means archive in reclaim folder
//	2 means delete the log files

LOG_RECLAIM_ACTION = 2

//absolute path for the reclaim log dir

LOG_RECLAIM_DIR = reclaim_dir

//*the buffer cache dirty page flusher and the buffer cache memory reclaimer frequency 
//in micro sec note that this is just a hint and db changes this as per need
// Try not to change this

BUF_FLUSH_RECLAIM_FREQ = 900000

//in case of deep pressure on memory, grow the buffer by amount in MB (Not used as of now)

GROW_BUFF_SIZE = 16

//*max pages to look for scatter gather, put 0 to select the system supported 
//	number (suggested), else put whatever num, but if it's more than system supported
//	then it will be corrected to the system suppored one
//Try not to change this

SCATTER_GATHER_MAX = 0

//please ensure before changing the parameters below as they may affect the db's performance

//**the num of slots for table
//	this should be balanced, however for the scenario where many tables/indexes are created
//	(for ex; if the numbers are really high, then this should be low, else should be high)
//	min number should be around 10000 and max could be in hundreds of thousands
//	please ensure to change this number for different setting
//	need to have different numbers for different flavors. For real time platform this 
//	should be low and for databases it could be high

MAX_NUM_TABLE_HEADER_SLOT = 20000

//max hdrs to scan to look for dirty pages

MIN_DIRTY_SCAN = 192

//max headers to scan to find a updated page

MIN_UPDATED_SCAN = 48

//this defines the constraints for flushing the index pages
//Try not to change this

IDX_FLUSH_CONSTRAINT = 4

//this defines the constraints for flushing the data pages
//Try not to change this

DAT_FLUSH_CONSTRAINT = 25

//this defines the constraints for freeing up the index pages for memory
//Try not to change this

IDX_RECLAIM_CONSTRAINT = 3

//this defines the constraints for freeing up the dat pages for memory
//Try not to change this

DAT_RECLAIM_CONSTRAINT = 7

//this indicates the speed at which the data is written
//Try not to change this

PAGE_WRITE_FACTOR = 192

//this indicates the speed at which data is read
//Try not to change this

PAGE_READ_FACTOR = 192

//this normalizes the idx vs dat pages, helpful when we favor one over other
//Try not to change this

IDX_DAT_NORMALIZE = 2

//the pre-fetch buffer max size, it can be lower than this but not greater (in MB)
//Try not to change this

PREFETCH_BUF_SIZE = 2

//pre-fetch scan window size
//Try not to change this

PREFETCH_SCAN_WINDOW_NUM = 48

//pre-fetch extent size
//Try not to change this

PREFETCH_EXTENT_NUM = 32

//***** Don't bother for these ******
//bangdb group id

BANGDB_GROUP = bangdb


//*************************************************************************************
//*************************************************************************************
//*************************************************************************************
//**** not used (in this version, contact us for more info on how to enable) **********
//*************************************************************************************
//*************************************************************************************
//*************************************************************************************

//	The archive dir where BangDB will keep archives of tables. 
//	note: not used as of now

BANGDB_ARCHIVE_DIR = archive

//**whether to get support from SSD
//	This allocates area in SSD drive and use to enhance the db performance, 
//	esp in random I/O scenario. If don't wish to enable this (for ex;
//	if SSD drive is not there) then put 0 as value else to enable
//	specify the size of SSD dedicated for enahncing the performance
//	value is in GB
//	note: not enabled with this release [ 2.0 ]

BANGDB_SSD_POOL_SIZE = 64

//**if the BANGDB_SSD_POOL_SIZE is greater than 0 then we need to specify
//	the dir on SSD drive where to create the pool
//	note: not enabled with this release [ 2.0 ]

BANGDB_SSD_POOL_DIR = /home/ssd/pool
